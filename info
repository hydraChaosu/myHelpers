 strings and numbers are primitive values and are immutable by nature
 
 redux no mutation
 
 state = ['Do not mutate state!']
 
state.concat(action.todo)
[...state, action.todo]

DEEP COPY
let newObj = JSON.parse(JSON.stringify(obj));

in loop
          setTimeout(() => {
            console.log(i, soundtrack[i]);
            this.onPianoButtonClick(null, soundtrack[i]);
          }, tempo * i);

function debounce(call, time) {
    let timeout;
    return function(...args) {
    clearTimeout(timeout)
    timeout = setTimeout(() => call.apply(this,args), time)
    }
}

function throttle(call, time) {
    let throttled = true
    return function(...args) {
    if (!throttled) return
    throttled = false
    call.apply(this, args)
    setTimeout(() => throttled = true, time)
    
    
    
    }

}


////

var a = function b() {
      a = "c"
      a = b
      a // function b() mozna miec dostep do b w named function ekspression 
}

a() ok 
b() error


date2 = input.valueAsDate;
a = date.toISOString()
a.split("T") na lewo mamy date na prawo czas

const data = [1, 2, 3, 4];
const data2 = [1, [2, 3], 4, [5, 6]];

const showData = (info) => {
  for (let data of info) {
    if (Array.isArray(data)) {
      showData(data);
    } else {
      console.log(data);
    }
  }
};

showData(data2);


function filterArray(arr, query) {
    query = query.toLowerCase();
    return arr.filter(function(el) {
        if (el === undefined || el === null || el === "") {
            return false;
        } else if (typeof el === "boolean") {
            return false;
        } else if (typeof el === "object") {
            if(Array.isArray(el)){
                return filterArray(el, query);
            }
            else {
                return Object.values(el).some(function(v) {
                    if(v!==null && typeof v === "object"){
                        return filterArray(Object.values(v), query);
                    }
                    else if(v!==null && v.toString().toLowerCase().includes(query)){
                        return true;
                    }
                });
            }
        } else if (el.toString().toLowerCase().includes(query)) {
            return true;
        }
        return false;
    });
}


