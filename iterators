function myIterator(start, finish) {
  let index = start;
  let count = 0;

  return {
    next() {
      let result;
      if (index < finish) {
        result = { value: index, done: false };
        index += 1;
        count++;
        return result;
      }
      return {
        value: count,
        done: true,
      };
    },
  };
}

const it = myIterator(0, 10);
let result = it.next();

while (!result.done) {
  console.log(result.value);
  result = it.next();
}

/////////////////////////////////////

const arr = [1, 2, 3, 453];

const it = arr[Symbol.iterator]();
console.log(it.next());
console.log(it.next());
console.log(it.next());
console.log(it.next());
console.log(it.next());

//Map is a collection of keyed data items, just like an Object. But the main difference is that Map allows keys of any type.
//Iteration over Map
//For looping over a map, there are 3 methods:

//map.keys() – returns an iterable for keys,
//map.values() – returns an iterable for values,
//map.entries() – returns an iterable for entries [key, value], it’s used by default in for..of.
const map = new Map();
map.set("key1", "value 1");
map.set("key2", "value 2");
map.set("key3", "value 3");

const mapIterator = map[Symbol.iterator]();
console.log(mapIterator.next().value);
console.log(mapIterator.next().value);
console.log(mapIterator.next().value);

for (const [key, value] of map) {
  console.log(`${key} and ${value}`);
}

const mySet = new Set();
mySet.add("Uno");
mySet.add("Does");

const setIterator = mySet[Symbol.iterator]();
console.log(setIterator.next());
console.log(setIterator.next());

for (const value of mySet) {
  console.log(`${value}`);
}


